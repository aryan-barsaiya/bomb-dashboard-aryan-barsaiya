{"version":3,"sources":["utils/constants.ts","state/transactions/actions.ts","state/application/hooks.ts","utils/provider.ts","contexts/BombFinanceProvider/BombFinanceProvider.tsx","utils/formatBalance.ts","hooks/useBombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","hooks/useNetworkPrompt.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","config.ts","bomb-finance/ERC20.ts","services/graph/fetchers/pools.ts","services/graph/constants/index.ts","services/graph/queries/pools.ts","bomb-finance/BombFinance.ts","state/application/actions.ts","bomb-finance/config.ts","bomb-finance/ether-utils.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","hooks/useChainId.js","App.tsx","serviceWorker.js","index.tsx"],"names":["BOMB_TICKER","BSHARE_TICKER","BNB_TICKER","BTC_TICKER","SPOOKY_ROUTER_ADDR","ZAPPER_ROUTER_ADDR","addTransaction","createAction","clearAllTransactions","finalizeTransaction","checkedTransaction","useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","provider","getDefaultProvider","ethers","providers","Web3Provider","web3ProviderFrom","config","defaultProvider","Context","createContext","bombFinance","BombFinanceProvider","children","ethereum","account","useState","setBombFinance","useEffect","unlockWallet","bomb","BombFinance","Provider","value","getDisplayBalance","balance","decimals","fractionDigits","isTruncated","number","getBalance","ret","toFixed","length","slice","getFullDisplayBalance","Number","div","BigNumber","from","pow","useBombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","a","Object","values","bankDefinitions","bankInfo","finished","stakedBalanceOnBank","contract","poolId","myAccount","lte","push","address","deployments","depositToken","externalTokens","depositTokenName","earnToken","earnTokenName","BOMB","BSHARE","sort","b","catch","err","console","error","stack","connectToNetwork","request","method","params","toString","chainName","networkName","nativeCurrency","name","symbol","rpcUrls","blockExplorerUrls","ftmscanUrl","usePromptNetwork","networkPrompt","setNetworkPrompt","window","networkVersion","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","undefined","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","configurations","development","require","WBNB","FUSDT","BTCB","SBTC","SUSD","SVL","CAKE","ZOO","BUSD","BUSM","SHIBA","BBOND","baseLaunchDate","Date","bondLaunchesAt","boardroomLaunchesAt","refreshInterval","production","BombSBTCRewardPool","sectionInUI","closedForStaking","BombSUSDRewardPool","BombMaxiLPBShareRewardPool","BshareMaxiLPBShareRewardPool","BusmBusdLPBShareRewardPool","BombBShareRewardPool","BBondBShareRewardPool","BshareBnbLPBShareRewardPool","BombBtcbLPBShareRewardPool","BombBshareLPBShareRewardPool","ERC20","decimal","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","formatUnits","supply","inputs","internalType","type","stateMutability","anonymous","indexed","outputs","appClient","ApolloClient","uri","cache","InMemoryCache","bombMaxi","query","gql","variables","id","cfg","signer","contracts","boardroomVersionOfUser","BOMBBTCB_LP","XBOMB","BNB","BTC","BOMB_BORROWABLE","BTCB_BORROWABLE","BBOMB_BOMB","BBOMB_BTCB","BBOMBBOMB","BBOMBBTCB","BUSMBUSD_LP","BOMB_MAXI","BSHARE_MAXI","entries","deployment","abi","Bomb","BShare","BBond","xBOMB","BombBorrowable","BtcbBorrowable","IBombBorrowableABI","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","log","fetchBoardroomVersionOfUser","then","version","BombRewardPool","BombGenesisRewardPool","bombRewardPoolSupply","bombRewardPoolSupply2","bombCirculatingSupply","sub","getTokenPriceFromPancakeswapBTC","priceInBTC","getBTCBPriceFromPancakeswap","priceOfOneBTC","priceOfBombInDollars","tokenInFtm","priceInDollars","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isBomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","liquidity","priceOfOne","totalLiquidity","btcAmountBN","btcAmount","Treasury","getBombStat","bombStat","getBondPremiumRate","bondBombRatioBN","modifier","bondPriceInBNB","priceOfBBondInDollars","displayedTotalSupply","BShareRewardPool","getTokenPriceFromPancakeswap","priceInBNB","tShareCirculatingSupply","getWBNBPriceFromPancakeswap","priceOfOneBNB","priceOfSharesInDollars","Oracle","twap","utils","parseEther","expectedPrice","getBombUpdatedPrice","getBurnableBombLeft","BombMaxi","totalShares","data","pool","bank","poolContract","depositTokenValue","getDepositTokenPriceInDollars","depositTokenPrice","stakeInPool","TVL","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","bombToken","xbombToken","getXbombExchange","xbombExchange","xbombPercent","xbombPercentTotal","startDate","nowDate","now","difference","getTime","aprPerDay","contractName","endsWith","tSharePerSecond","rewardPerSecond","poolStartTime","startDateTime","toNumber","epochBombPerSecond","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getBusdLPTokenPrice","getMaxiLPTokenPrice","epoch","previousEpochBombPrice","getBombPrice","treasuryBombPrice","buyBonds","decimalToBalance","priceForBomb","redeemBonds","totalValue","tokenAmountInPool","poolValue","isNaN","BSHAREPrice","BOMBPrice","currentBoardroom","boardroomtShareBalanceOf","bombStakeBalanceOf","boardroomTVL","bombTVL","tokenSupply","priceOfToken","tokenInLP","getTokenPriceFromPancakeswapBUSD","priceToken","maxiPool","getBombMaxiStats","bombmaxi","poolName","pendingBOMB","pendingShare","userInfo","deposit","withdraw","Boardroom","tokenContract","ready","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","btcb","priceForPeg","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","btcPriceInBNB","wbnbPrice","btcprice","latestSnapshotIndex","boardroomHistory","lastHistory","lastRewardsReceived","amountOfRewardsPerDay","realAPR","xBombBombBalanceOf","canClaimReward","canWithdraw","getStakedSharesOnBoardroom","stakedAmount","notStaked","result","isOldBoardroomMember","Error","stake","Xbomb","enter","BombRouter","expiry","redeem","mint","getShareOf","bbombBomb","totalBalance","totalBomb","totalBtcb","getExchangeRate","XbombExchange","xBombPerBomb","parseFloat","xBombRate","parseUnits","leave","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","members","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","asset","assetUrl","options","image","bombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryBoardroomFundedFilter","BoardroomFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","boardroomFundEvents","events","forEach","index","boardroomFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","lpName","zapper","estimateZapIn","estimate","estimateZapInToken","zapIn","zapInToken","bbondAmount","BShareSwapper","swapBBondToBShare","estimateAmountOfBShare","estimateBN","getBShareBalance","bshareBalanceBN","getBBondBalance","bbondBalanceBN","getBShareAmountPerBomb","rateBSharePerBombBN","bshareBalance","bbondBalance","rateBSharePerBomb","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","endpoint","ethConfig","assign","includes","Web3","WebsocketProvider","HttpProvider","timeout","d","String","createReducer","builder","addCase","transactions","payload","hash","approval","summary","txs","addedTime","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","yellow","primary","light","main","secondary","white","newNavy","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","useChainId","setChainId","fetchChainId","parseInt","refreshChainId","Home","lazy","Farm","Bond","Supply","Dashboard","NoMatch","UseWalletProviderWrapper","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.ba5d7ac5.chunk.js","sourcesContent":["export const BOMB_TICKER = 'BOMB';\nexport const BSHARE_TICKER = 'BSHARE';\nexport const BBOND_TICKER = 'BBOND';\nexport const BNB_TICKER = 'BNB';\nexport const WBNB_TICKER = 'WBNB';\nexport const BTC_TICKER = 'BTCB';\n\nexport const SPOOKY_ROUTER_ADDR = '0x10ED43C718714eb63d5aA57B78B54704E256024E';\nexport const ZAPPER_ROUTER_ADDR = '0xA0C5F779e52A8D9a81aF17Dd910577946B6810F6';\nexport const TAX_OFFICE_ADDR = '0x2A637BEE0D76136d8ee44B96cf0A5f9198657AaF';\n","import {createAction} from '@reduxjs/toolkit';\n// import { ChainId } from '@uniswap/sdk';\nimport {ChainId} from '@pancakeswap/sdk';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  from: string;\n  approval?: {tokenAddress: string; spender: string};\n  summary?: string;\n}>('transactions/addTransaction');\n\nexport const clearAllTransactions = createAction<{chainId: ChainId}>('transactions/clearAllTransactions');\n\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n","import {useCallback, useMemo} from 'react';\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu} from './actions';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {AppState} from '../index';\nimport {useWallet} from 'use-wallet';\n\nexport function useBlockNumber(): number | undefined {\n  const {chainId} = useWallet();\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({content, key}));\n    },\n    [dispatch],\n  );\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({key}));\n    },\n    [dispatch],\n  );\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n","import { ethers } from 'ethers';\nimport config from '../config';\nimport { web3ProviderFrom } from '../bomb-finance/ether-utils';\n\nlet provider: ethers.providers.Web3Provider = null;\n\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\n  if (!provider) {\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\n  }\n\n  return provider;\n}\n","import React, {createContext, useEffect, useState} from 'react';\nimport {useWallet} from 'use-wallet';\nimport BombFinance from '../../bomb-finance';\nimport config from '../../config';\n\nexport interface BombFinanceContext {\n  bombFinance?: BombFinance;\n}\n\nexport const Context = createContext<BombFinanceContext>({bombFinance: null});\n\nexport const BombFinanceProvider: React.FC = ({children}) => {\n  const {ethereum, account} = useWallet();\n  const [bombFinance, setBombFinance] = useState<BombFinance>();\n\n  useEffect(() => {\n    if (!bombFinance) {\n      const bomb = new BombFinance(config);\n      if (account) {\n        // wallet was unlocked at initialization\n        bomb.unlockWallet(ethereum, account);\n      }\n      setBombFinance(bomb);\n    } else if (account) {\n      bombFinance.unlockWallet(ethereum, account);\n    }\n  }, [account, ethereum, bombFinance]);\n\n  return <Context.Provider value={{bombFinance}}>{children}</Context.Provider>;\n};\n","import {BigNumber} from 'ethers';\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 4,\n  isTruncated: boolean = false,\n) => {\n  if (decimals === 0) {\n    fractionDigits = 0;\n  }\n  const number = getBalance(balance, decimals - fractionDigits);\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\n  if (ret.length > 12 && isTruncated) {\n    return ret.slice(0, 12) + '...';\n  }\n  return ret;\n};\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\n};\n\nexport function getBalance(balance: BigNumber, decimals = 18): number {\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\n}\n","import {useContext} from 'react';\nimport {Context} from '../contexts/BombFinanceProvider';\n\nconst useBombFinance = () => {\n  const {bombFinance} = useContext(Context);\n  return bombFinance;\n};\n\nexport default useBombFinance;\n","import {createContext} from 'react';\nimport {Bank} from '../../bomb-finance';\n\nexport interface BanksContext {\n  banks: Bank[];\n}\n\nconst context = createContext<BanksContext>({\n  banks: [],\n});\n\nexport default context;\n","import React, {useCallback, useEffect, useState} from 'react';\nimport Context from './context';\nimport useBombFinance from '../../hooks/useBombFinance';\nimport {Bank} from '../../bomb-finance';\nimport config, {bankDefinitions} from '../../config';\n\nconst Banks: React.FC = ({children}) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!bombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await bombFinance.stakedBalanceOnBank(\n          bankInfo.contract,\n          bankInfo.poolId,\n          bombFinance.myAccount,\n        );\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: bombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'BOMB' ? bombFinance.BOMB : bombFinance.BSHARE,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [bombFinance, setBanks]);\n\n  useEffect(() => {\n    if (bombFinance) {\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, bombFinance, fetchPools]);\n\n  return <Context.Provider value={{banks}}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n","import { useEffect, useState } from 'react';\nimport config from './../config';\n\n/**\n * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n * And https://docs.metamask.io/guide/ethereum-provider.html\n * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n * @returns\n */\nexport const connectToNetwork = async (provider: any) => {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: `0x${config.chainId.toString(16)}`,\n        chainName: config.networkName,\n        nativeCurrency: {\n          name: 'BNB',\n          symbol: 'BNB',\n          decimals: 18,\n        },\n        rpcUrls: ['https://rpc.ankr.com/bsc'],\n        blockExplorerUrls: [config.ftmscanUrl],\n      },\n    ],\n  });\n};\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n","import React, {createContext, useCallback, useState} from 'react';\nimport styled from 'styled-components';\n\ninterface ModalsContext {\n  content?: React.ReactNode;\n  isOpen?: boolean;\n  onPresent: (content: React.ReactNode) => void;\n  onDismiss: () => void;\n}\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => {},\n  onDismiss: () => {},\n});\n\nconst Modals: React.FC = ({children}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState<React.ReactNode>();\n\n  const handlePresent = useCallback(\n    (modalContent: React.ReactNode) => {\n      setContent(modalContent);\n      setIsOpen(true);\n    },\n    [setContent, setIsOpen],\n  );\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined);\n    setIsOpen(false);\n  }, [setContent, setIsOpen]);\n\n  return (\n    <Context.Provider\n      value={{\n        content,\n        isOpen,\n        onPresent: handlePresent,\n        onDismiss: handleDismiss,\n      }}\n    >\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss} />\n          {React.isValidElement(content) &&\n            React.cloneElement(content, {\n              onDismiss: handleDismiss,\n            })}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  );\n};\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport default Modals;\n","import React, {useState, useEffect} from 'react';\n\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 60000;\n\nexport const RefreshContext = React.createContext({slow: 0, fast: 0});\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({children}) => {\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1);\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1);\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <RefreshContext.Provider value={{slow, fast}}>{children}</RefreshContext.Provider>;\n};\n","import { Configuration } from './bomb-finance/config';\nimport { BankInfo } from './bomb-finance';\n\nconst configurations: { [env: string]: Configuration } = {\n  // development: {s\n  development: {\n    chainId: 56,\n    networkName: 'Ganache_project',\n    ftmscanUrl: 'https://bscscan.com',\n    defaultProvider: 'https://rpc.ankr.com/bsc',\n    deployments: require('./bomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\n      SBTC: ['0x1d28cd41fc594232D05F2AbdAFBb556E7F78Dc2a', 18],\n      SUSD: ['0x12017c89444624C0268A1053467e22954F4fd362', 18],\n      SVL: ['0x37F14E7c2FadC2A01dBD93b8a1F69D41c6c3d554', 18],\n      CAKE: ['0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 18],\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\n      BUSD: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18],\n      BUSM: ['0x6216B17f696B14701E17BCB24Ec14430261Be94A', 18],\n      BOMB: ['0x522348779DCb2911539e76A1042aA922F9C47Ee3', 18],\n      '80BOMB-20BTCB-LP': ['0xd6F52e8AB206e59A1E13b3D6c5B7f31E90ef46EF', 18],\n      '80BSHARE-20WBNB-LP': ['0x2C374eD1575e5C2C02c569f627299E902A1972cb', 18],\n      'BBOMB-BOMB': ['0xcB72214d09a1804E4eecA9C3F3bB6ca49460237b', 18],\n      'BBOMB-BTCB': ['0x23EFC2ff90e3423c3F84352b21b49FBcD4C3E32D', 18],\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\n      'BUSM-BUSD-LP': ['0xEe46Bd06a8876c3cc86027dc7D2Df19af513cD12', 18],\n      BBOND: ['0xDA1d9C79240003195d0a67f202efcCCC3F78b994', 18],\n      'USDT-BTCB-LP': ['0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62', 18],\n      'BOMB-BTCB-LP': ['0x84392649eb0bC1c1532F2180E58Bae4E1dAbd8D6', 18],\n      'BOMB-BSHARE-LP': ['0x54f9fE531224Fa43Feb218B20ABa84d22a8fDc0C', 18],\n      'BOMB-BNB-LP': ['0x107CDC0c46615C63EE4abC4E1e264D3BD12390e6', 18],\n      'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\n      'BSHARE-BNB-APELP': ['0x0dE2a71b2f43CF588A00422d41E1C02D0E08D552', 18],\n      'BOMB-BTCB-APELP': ['0xB6E85031F313563bF12ea414118978C8BD78db5D', 18],\n    },\n    baseLaunchDate: new Date('2021-11-20 1:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    boardroomLaunchesAt: new Date('2021-11-20T00:00:00Z'),\n    refreshInterval: 10000,\n  },\n  production: {\n    chainId: 56,\n    networkName: 'Ganache_project',\n    ftmscanUrl: 'https://bscscan.com',\n    defaultProvider: 'https://rpc.ankr.com/bsc/45201ee6b17d73e401be85a55927da2fb732de7e15051ef8f281ec1cdc888ba8',\n    deployments: require('./bomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\n      BBOND: ['0xDA1d9C79240003195d0a67f202efcCCC3F78b994', 18],\n      SBTC: ['0x1d28cd41fc594232D05F2AbdAFBb556E7F78Dc2a', 18],\n      'BBOMB-BOMB': ['0xcB72214d09a1804E4eecA9C3F3bB6ca49460237b', 18],\n      'BBOMB-BTCB': ['0x23EFC2ff90e3423c3F84352b21b49FBcD4C3E32D', 18],\n      SVL: ['0x37F14E7c2FadC2A01dBD93b8a1F69D41c6c3d554', 18],\n      BUSM: ['0x6216B17f696B14701E17BCB24Ec14430261Be94A', 18],\n      BUSD: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18],\n      SUSD: ['0x12017c89444624C0268A1053467e22954F4fd362', 18],\n      CAKE: ['0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 18],\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\n      BOMB: ['0x522348779DCb2911539e76A1042aA922F9C47Ee3', 18],\n      '80BOMB-20BTCB-LP': ['0xd6F52e8AB206e59A1E13b3D6c5B7f31E90ef46EF', 18],\n      '80BSHARE-20WBNB-LP': ['0x2C374eD1575e5C2C02c569f627299E902A1972cb', 18],\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\n      'USDT-BTCB-LP': ['0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62', 18],\n      'BOMB-BTCB-LP': ['0x84392649eb0bC1c1532F2180E58Bae4E1dAbd8D6', 18],\n      'BUSM-BUSD-LP': ['0xEe46Bd06a8876c3cc86027dc7D2Df19af513cD12', 18],\n      'BOMB-BSHARE-LP': ['0x54f9fE531224Fa43Feb218B20ABa84d22a8fDc0C', 18],\n      'BOMB-BNB-LP': ['0x107CDC0c46615C63EE4abC4E1e264D3BD12390e6', 18],\n      'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\n      'BSHARE-BNB-APELP': ['0x0dE2a71b2f43CF588A00422d41E1C02D0E08D552', 18],\n      'BOMB-BTCB-APELP': ['0xB6E85031F313563bF12ea414118978C8BD78db5D', 18],\n    },\n    baseLaunchDate: new Date('2021-11-20 1:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    boardroomLaunchesAt: new Date('2021-11-20T00:00:00Z'),\n    refreshInterval: 10000,\n  },\n};\n\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\n  /*\n  Explanation:\n  name: description of the card\n  poolId: the poolId assigned in the contract\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\n        - 0 = Single asset stake pools\n        - 1 = LP asset staking rewarding BOMB\n        - 2 = LP asset staking rewarding BSHARE\n  contract: the contract name which will be loaded from the deployment.environmnet.json\n  depositTokenName : the name of the token to be deposited\n  earnTokenName: the rewarded token\n  finished: will disable the pool on the UI if set to true\n  sort: the order of the pool\n  */\n  // BombBTCApeLPBombRewardPool: {\n  //   name: 'Earn BOMB by BOMB-BTCB Ape LP',\n  //   poolId: 2,\n  //   sectionInUI: 1,\n  //   contract: 'BombBTCApeLPBombRewardPool',\n  //   depositTokenName: 'BOMB-BTCB-APELP',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 2,\n  //   closedForStaking: true,\n  // },\n  // BombBTCLPBombRewardPool: {\n  //   name: 'Earn BOMB by BOMB-BTC LP',\n  //   poolId: 0,\n  //   sectionInUI: 1,\n  //   contract: 'BombBTCLPBombRewardPool',\n  //   depositTokenName: 'BOMB-BTCB-LP',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 7,\n  //   closedForStaking: true,\n  // },\n  // BombCakeRewardPool: {\n  //   name: 'Earn BOMB by CAKE',\n  //   poolId: 0,\n  //   sectionInUI: 0,\n  //   contract: 'BombCAKERewardPool',\n  //   depositTokenName: 'CAKE',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 3,\n  //   closedForStaking: true,\n  // },\n  BombSBTCRewardPool: {\n    name: 'Earn BOMB by SBTC',\n    poolId: 2,\n    sectionInUI: 0,\n    contract: 'BombSBTCRewardPool',\n    depositTokenName: 'SBTC',\n    earnTokenName: 'BOMB',\n    finished: true,\n    sort: 4,\n    closedForStaking: true,\n  },\n  BombSUSDRewardPool: {\n    name: 'Earn BOMB by SUSD',\n    poolId: 1,\n    sectionInUI: 0,\n    contract: 'BombSUSDRewardPool',\n    depositTokenName: 'SUSD',\n    earnTokenName: 'BOMB',\n    finished: true,\n    sort: 5,\n    closedForStaking: true,\n  },\n  // BombSVLRewardPool: {\n  //   name: 'Earn BOMB by SVL',\n  //   poolId: 3,\n  //   sectionInUI: 0,\n  //   contract: 'BombSVLRewardPool',\n  //   depositTokenName: 'SVL',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 6,\n  //   closedForStaking: true,\n  // },\n\n  // BombWBNBGenesisRewardPool: {\n  //   name: 'Earn BOMB by WBNB',\n  //   poolId: 4,\n  //   sectionInUI: 0,\n  //   contract: 'BombWBNBGenesisRewardPool',\n  //   depositTokenName: 'WBNB',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 1,\n  //   closedForStaking: true,\n  // },\n  // BombBnbLPRewardPool: {\n  //   name: 'Earn BOMB by BOMB-BNB LP',\n  //   poolId: 1,\n  //   sectionInUI: 1,\n  //   contract: 'BombBnbLPRewardPool',\n  //   depositTokenName: 'BOMB-BNB-LP',\n  //   earnTokenName: 'BOMB',\n  //   finished: false,\n  //   sort: 8,\n  //   closedForStaking: false,\n  // },\n  // BombShibaRewardPool: {\n  //   name: 'Earn BOMB by SHIBA',\n  //   poolId: 2,\n  //   sectionInUI: 0,\n  //   contract: 'BombShibaGenesisRewardPool',\n  //   depositTokenName: 'SHIBA',\n  //   earnTokenName: 'BOMB',\n  //   finished: false,\n  //   sort: 3,\n  //   closedForStaking: true,\n  // },\n  // BombZooRewardPool: {\n  //   name: 'Earn BOMB by ZOO',\n  //   poolId: 3,\n  //   sectionInUI: 0,\n  //   contract: 'BombZooGenesisRewardPool',\n  //   depositTokenName: 'ZOO',\n  //   earnTokenName: 'BOMB',\n  //   finished: false,\n  //   sort: 4,\n  //   closedForStaking: true,\n  // },\n\n  // BombFtmLPBombRewardPoolOld: {\n  //   name: 'Earn BOMB by BOMB-BNB LP',\n  //   poolId: 0,\n  //   sectionInUI: 1,\n  //   contract: 'BombFtmLpBombRewardPoolOld',\n  //   depositTokenName: 'BOMB-BNB-LP',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 9,\n  //   closedForStaking: true,\n  // },\n  // BombFtmLPBShareRewardPool: {\n  //   name: 'Earn BSHARE by BOMB-BNB LP',\n  //   poolId: 0,\n  //   sectionInUI: 2,\n  //   contract: 'BombFtmLPBShareRewardPool',\n  //   depositTokenName: 'BOMB-BNB-LP',\n  //   earnTokenName: 'BSHARE',\n  //   finished: false,\n  //   sort: 6,\n  //   closedForStaking: false,\n  // },\n  BombMaxiLPBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB Maxi LP',\n    poolId: 7,\n    sectionInUI: 2,\n    contract: 'BombMaxiLPBShareRewardPool',\n    depositTokenName: '80BOMB-20BTCB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 0,\n    closedForStaking: false,\n  },\n  BshareMaxiLPBShareRewardPool: {\n    name: 'Earn BSHARE by BSHARE Maxi LP',\n    poolId: 8,\n    sectionInUI: 2,\n    contract: 'BshareMaxiLPBShareRewardPool',\n    depositTokenName: '80BSHARE-20WBNB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 1,\n    closedForStaking: false,\n  },\n  BusmBusdLPBShareRewardPool: {\n    name: 'Earn BSHARE by BUSM-BUSD LP',\n    poolId: 6,\n    sectionInUI: 1,\n    contract: 'BusmBusdLPBShareRewardPool',\n    depositTokenName: 'BUSM-BUSD-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 0,\n    closedForStaking: false,\n  },\n  // BombBtcbLPApeBShareRewardPool: {\n  //   name: 'Earn BSHARE by BOMB-BTCB LP',\n  //   poolId: 3,\n  //   sectionInUI: 2,\n  //   contract: 'BombBtcbLPApeBShareRewardPool',\n  //   depositTokenName: 'BOMB-BTCB-LP',\n  //   earnTokenName: 'BSHARE',\n  //   finished: false,\n  //   sort: 7,\n  //   closedForStaking: false,\n  // },\n  // BshareBnbApeLPBShareRewardPool: {\n  //   name: 'Earn BSHARE by BSHARE-BNB Ape LP',\n  //   poolId: 2,\n  //   sectionInUI: 1,\n  //   contract: 'BshareBnbApeLPBShareRewardPool',\n  //   depositTokenName: 'BSHARE-BNB-APELP',\n  //   earnTokenName: 'BSHARE',\n  //   finished: true,\n  //   sort: 5,\n  //   closedForStaking: true,\n  // },\n  BombBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB',\n    poolId: 5,\n    sectionInUI: 0,\n    contract: 'BombBShareRewardPool',\n    depositTokenName: 'BOMB',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 4,\n    closedForStaking: true,\n  },\n  BBondBShareRewardPool: {\n    name: 'Earn BSHARE by BBOND',\n    poolId: 9,\n    sectionInUI: 3,\n    contract: 'BBondBShareRewardPool',\n    depositTokenName: 'BBOND',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 4,\n    closedForStaking: false,\n  },\n  BshareBnbLPBShareRewardPool: {\n    name: 'Earn BSHARE by BSHARE-BNB LP',\n    poolId: 0,\n    sectionInUI: 3,\n    contract: 'BshareBnbLPBShareRewardPool',\n    depositTokenName: 'BSHARE-BNB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 2,\n    closedForStaking: false,\n  },\n  BombBtcbLPBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB-BTCB LP',\n    poolId: 1,\n    sectionInUI: 3,\n    contract: 'BombBtcbLPBShareRewardPool',\n    depositTokenName: 'BOMB-BTCB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 1,\n    closedForStaking: false,\n  },\n  BombBshareLPBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB-BSHARE LP',\n    poolId: 4,\n    sectionInUI: 0,\n    contract: 'BombBshareLPBShareRewardPool',\n    depositTokenName: 'BOMB-BSHARE-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 4,\n    closedForStaking: false,\n  },\n};\n\nexport default configurations[process.env.NODE_ENV || 'development'];\n","import {BigNumber, Contract} from 'ethers';\nimport {Signer} from '@ethersproject/abstract-signer';\nimport {Provider} from '@ethersproject/abstract-provider';\nimport {TransactionResponse} from '@ethersproject/providers';\nimport {formatUnits} from 'ethers/lib/utils';\n\nclass ERC20 {\n  private contract: Contract;\n\n  address: string;\n  symbol: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transferFrom(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nconst ABI = [\n  {\n    inputs: [\n      {internalType: 'string', name: 'name', type: 'string'},\n      {\n        internalType: 'string',\n        name: 'symbol',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        internalType: 'uint8',\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'addedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'increaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'subtractedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'decreaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport { GRAPH_HOST } from '../constants';\n\nimport { poolQuery } from '../queries/pools';\n\nconst appClient = new ApolloClient({\n  uri: GRAPH_HOST,\n  cache: new InMemoryCache(),\n});\n\nexport const bombMaxi = (poolId: string) =>\n  appClient.query({\n    query: gql(poolQuery),\n    variables: {\n      id: poolId,\n    },\n  });\n//     .then((data) => return data.data.pool\n//        // console.log('Subgraph data: ', data.data.pool))\n// .catch((err) => {\n//     console.log('Error fetching data: ', err);\n\n// });\n","const THE_GRAPH = 'https://api.thegraph.com/subgraphs/name/acryptosx/balancer-v2';\n\nexport const GRAPH_HOST = THE_GRAPH;\n","export const poolQuery = `\n  query($id: String) { pool(id: $id) {\n    id\n    address\n    totalLiquidity\n    totalShares\n    poolType\n    factory\n  }\n}\n`;\n\n//0xd6f52e8ab206e59a1e13b3d6c5b7f31e90ef46ef000200000000000000000028\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\n//import { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@pancakeswap/sdk';\nimport { Configuration } from './config';\nimport { MaxiInfo, ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, BShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport IBombBorrowableABI from './IBombBorrowable.abi.json';\n\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { BNB_TICKER, SPOOKY_ROUTER_ADDR, BOMB_TICKER } from '../utils/constants';\nimport { bombMaxi } from '../services/graph';\n\n/**\n * An API module of Bomb Money contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  boardroomVersionOfUser?: string;\n\n  BOMBBTCB_LP: Contract;\n  BOMB: ERC20;\n  BUSD: ERC20;\n  BSHARE: ERC20;\n  BBOND: ERC20;\n  XBOMB: ERC20;\n  BNB: ERC20;\n  BTC: ERC20;\n  BOMB_BORROWABLE: Contract;\n  BTCB_BORROWABLE: Contract;\n  BBOMB_BOMB: ERC20;\n  BBOMB_BTCB: ERC20;\n  BBOMBBOMB: ERC20;\n  BBOMBBTCB: ERC20;\n  BUSMBUSD_LP: Contract;\n  BUSM: ERC20;\n  BOMB_MAXI: ERC20;\n  BSHARE_MAXI: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.BOMB = new ERC20(deployments.Bomb.address, provider, 'BOMB');\n    this.BSHARE = new ERC20(deployments.BShare.address, provider, 'BSHARE');\n    this.BBOND = new ERC20(deployments.BBond.address, provider, 'BBOND');\n    this.BNB = this.externalTokens['WBNB'];\n    this.BTC = this.externalTokens['BTCB'];\n    this.XBOMB = new ERC20(deployments.xBOMB.address, provider, 'XBOMB');\n    this.BUSM = this.externalTokens['BUSM'];\n    this.BUSD = this.externalTokens['BUSD'];\n\n    // this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\n    // this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\n\n    // this.BBOMB_BOMB = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\n    // this.BBOMB_BTCB = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\n    this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\n    this.BBOMBBOMB = this.externalTokens['BBOMB-BOMB'];\n    this.BBOMBBTCB = this.externalTokens['BBOMB-BTCB'];\n\n    this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\n    this.BOMB_BORROWABLE = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\n    this.BTCB_BORROWABLE = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\n\n    this.BOMB_MAXI = new ERC20(deployments.BombMaxiLPBShareRewardPool.address, provider, '80BOMB-20BTCB-LP');\n    this.BSHARE_MAXI = new ERC20(deployments.BshareMaxiLPBShareRewardPool.address, provider, '80BSHARE-20WBNB-LP');\n\n    // Uniswap V2 Pair\n\n    this.BOMBBTCB_LP = new Contract(externalTokens['BOMB-BTCB-LP'][0], IUniswapV2PairABI, provider);\n    this.BUSMBUSD_LP = new Contract(externalTokens['BUSM-BUSD-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.BOMB, this.BSHARE, this.BBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.BOMBBTCB_LP = this.BOMBBTCB_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchBoardroomVersionOfUser()\n      .then((version) => (this.boardroomVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\n        this.boardroomVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM APE TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getBombStat(): Promise<TokenStat> {\n    const { BombRewardPool, BombGenesisRewardPool } = this.contracts;\n    const supply = await this.BOMB.totalSupply();\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombGenesisRewardPool.address);\n    const bombRewardPoolSupply2 = await this.BOMB.balanceOf(BombRewardPool.address);\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply).sub(bombRewardPoolSupply2);\n    //  const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BOMB);\n    //const priceInBNBstring = priceInBNB.toString();\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.BOMB);\n    // const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    //const priceInDollars = await this.getTokenPriceFromPancakeswapBOMBUSD();\n    const priceOfBombInDollars = ((Number(priceInBTC) * Number(priceOfOneBTC)) / 10000).toFixed(2);\n    //console.log('priceOfBombInDollars', priceOfBombInDollars);\n\n    return {\n      //  tokenInFtm: (Number(priceInBNB) * 100).toString(),\n      tokenInFtm: priceInBTC.toString(),\n      priceInDollars: priceOfBombInDollars,\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\n    };\n  }\n\n  async getBTCPriceUSD(): Promise<Number> {\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    return Number(priceOfOneBTC);\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    // console.log('NAME', name);\n\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\n    // console.log('NAME', name);\n\n    const isBomb = name.startsWith('BOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const ftmAmountBN = await this.BNB.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  async getLPStatBTC(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\n    const isBomb = name.startsWith('BOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const btcAmountBN = await this.BTC.balanceOf(lpToken.address);\n    const btcAmount = getDisplayBalance(btcAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(btcAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\n\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(5).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n  /**\n   * Use this method to get price for Bomb\n   * @returns TokenStat for BBOND\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const bombStat = await this.getBombStat();\n    const bondBombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondBombRatioBN / 1e14 > 1 ? bondBombRatioBN / 1e14 : 1;\n    const bondPriceInBNB = (Number(bombStat.tokenInFtm) * modifier).toFixed(4);\n    const priceOfBBondInDollars = (Number(bombStat.priceInDollars) * modifier).toFixed(4);\n    const supply = await this.BBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInBNB,\n      priceInDollars: priceOfBBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for BSHARE\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { BShareRewardPool } = this.contracts;\n\n    const supply = await this.BSHARE.totalSupply();\n\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BSHARE);\n    const bombRewardPoolSupply = await this.BSHARE.balanceOf(BShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(bombRewardPoolSupply);\n    const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInBNB) * Number(priceOfOneBNB)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInBNB,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.BSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.BSHARE.decimal, 0),\n    };\n  }\n\n  async getBombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { Oracle, BombRewardPool } = this.contracts;\n    const expectedPrice = await Oracle.twap(this.BOMB.address, ethers.utils.parseEther('10000'));\n\n    const supply = await this.BOMB.totalSupply();\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombRewardPool.address);\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\n    };\n  }\n\n  async getBombPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBombUpdatedPrice();\n  }\n\n  // async getBombPegTWAP(): Promise<any> {\n  //   const { Treasury } = this.contracts;\n  //   const updatedPrice = Treasury.getBombUpdatedPrice();\n  //   const updatedPrice2 = updatedPrice * 10000;\n  //   return updatedPrice2;\n  // }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    // const burnableBomb = (Number(Treasury.getBurnableBombLeft()) * 1000).toFixed(2).toString();\n    return Treasury.getBurnableBombLeft();\n  }\n\n  async getBombMaxiStats(poolId: string): Promise<MaxiInfo> {\n    const BombMaxi = await bombMaxi(poolId);\n    return {\n      totalShares: BombMaxi.data.pool.totalShares.toString(),\n      totalLiquidity: BombMaxi.data.pool.totalLiquidity.toString(),\n\n      // tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      // ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      // priceOfOne: lpTokenPriceFixed,\n      // totalLiquidity: liquidity,\n      // totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    let depositToken = bank.depositToken;\n    // if (depositToken.symbol === '80BOMB-20BTCB-LP' || depositToken.symbol === '80BSHARE-20WBNB-LP') {\n    //   const temp = 'TBD';\n    //   return {\n    //     dailyAPR: temp,\n    //     yearlyAPR: temp,\n    //     TVL: temp,\n    //   };\n    // }\n    const poolContract = this.contracts[bank.contract];\n    let depositTokenValue: ERC20\n    if (bank.depositTokenName === \"BBOND\") {\n      depositTokenValue = this.BOMB\n    } else {\n      depositTokenValue = depositToken\n    }\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositTokenValue);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'BOMB' ? await this.getBombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n    );\n\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  async getXbombAPR(): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const bombToken = this.BOMB;\n    const xbombToken = this.XBOMB;\n\n    const xbombExchange = await this.getXbombExchange();\n    const xbombPercent = await xbombExchange;\n    const xbombPercentTotal = (Number(xbombPercent) / 1000000000000000000) * 100 - 100;\n\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bombToken.symbol, bombToken);\n\n    const stakeInPool = await bombToken.balanceOf(xbombToken.address);\n\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, bombToken.decimal));\n\n    const startDate = new Date('January 24, 2022');\n    const nowDate = new Date(Date.now());\n    const difference = nowDate.getTime() - startDate.getTime();\n    const days = difference / 60 / 60 / 24 / 1000;\n    const aprPerDay = xbombPercentTotal / days;\n\n    // Determine days between now and a date\n\n    // const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    // const totalRewardPricePerYear =\n    //   Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    // const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    // const totalStakingTokenInPool =\n    //   Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    // const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    // const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n\n    const dailyAPR = aprPerDay;\n    const yearlyAPR = aprPerDay * 365;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'BOMB') {\n      if (!contractName.endsWith('BombRewardPool')) {\n        const rewardPerSecond = await poolContract.tSharePerSecond();\n        if (depositTokenName === 'WBNB') {\n          return rewardPerSecond.mul(6000).div(11000).div(24);\n        } else if (depositTokenName === 'CAKE') {\n          return rewardPerSecond.mul(2500).div(11000).div(24);\n        } else if (depositTokenName === 'SUSD') {\n          return rewardPerSecond.mul(1000).div(11000).div(24);\n        } else if (depositTokenName === 'SVL') {\n          return rewardPerSecond.mul(1500).div(11000).div(24);\n        }\n        return rewardPerSecond.div(24);\n      }\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochBombPerSecond(1);\n      }\n      return await poolContract.epochBombPerSecond(0);\n    }\n    const rewardPerSecond = await poolContract.tSharePerSecond();\n    if (depositTokenName.startsWith('BOMB-BTCB')) {\n      return rewardPerSecond.mul(400).div(1000);\n    } else if (depositTokenName.startsWith('BOMB-BSHARE')) {\n      return rewardPerSecond.mul(0).div(1000);\n    } else if (depositTokenName.startsWith('BOMB')) {\n      return rewardPerSecond.mul(0).div(1000);\n    } else if (depositTokenName.startsWith('BBOND')) {\n      return rewardPerSecond.mul(150).div(1000);\n    } else if (depositTokenName.startsWith('BUSM-BUSD')) {\n      return rewardPerSecond.mul(50).div(1000);\n    } else if (depositTokenName.startsWith('80BOMB')) {\n      return rewardPerSecond.mul(200).div(1000);\n    } else if (depositTokenName.startsWith('80BSHARE')) {\n      return rewardPerSecond.mul(50).div(1000);\n    } else {\n      return rewardPerSecond.mul(150).div(1000);\n    }\n    // if (depositTokenName.startsWith('BOMB-BTCB')) {\n    //   return rewardPerSecond.mul(41650).div(10000);\n    // } else if (depositTokenName.startsWith('BOMB-BSHARE')) {\n    //   return rewardPerSecond.mul(0).div(119000);\n    // } else if (depositTokenName.startsWith('BOMB')) {\n    //   return rewardPerSecond.mul(59500).div(10000);\n    // } else {\n    //   return rewardPerSecond.mul(17850).div(10000);\n    // }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n    if (tokenName === 'WBNB') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'BOMB-BTCB-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\n      } else if (tokenName === 'BSHARE-BNB-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BSHARE, false);\n      } else if (tokenName === 'BOMB-BSHARE-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\n        // } else if (tokenName === 'BSHARE-BNB-APELP') {\n        //   tokenPrice = await this.getLPTokenPrice(token, this.BSHARE, false);\n      } else if (tokenName === 'BUSM-BUSD-LP') {\n        tokenPrice = await this.getBusdLPTokenPrice(token, this.BUSM, true);\n      } else if (tokenName === '80BOMB-20BTCB-LP') {\n        tokenPrice = await this.getMaxiLPTokenPrice(\n          '0xd6f52e8ab206e59a1e13b3d6c5b7f31e90ef46ef000200000000000000000028',\n        );\n      } else if (tokenName === '80BSHARE-20WBNB-LP') {\n        tokenPrice = await this.getMaxiLPTokenPrice(\n          '0x2c374ed1575e5c2c02c569f627299e902a1972cb000200000000000000000027',\n        );\n      }\n      else if (tokenName === 'BBOND') {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(this.BOMB);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n\n\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n      }\n    }\n    //console.log({ tokenPrice });\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getLastEpoch() : Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.previousEpochBombPrice();\n  }\n  \n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryBombPrice = await Treasury.getBombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryBombPrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForBomb = await Treasury.getBombPrice();\n\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForBomb);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(this.currentBoardroom().address);\n    const bombStakeBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\n\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\n    const bombTVL = Number(getDisplayBalance(bombStakeBalanceOf, this.BOMB.decimal)) * Number(BOMBPrice);\n\n    return totalValue + boardroomTVL + bombTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */\n  async getBusdLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    // const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n    const priceToken = await this.getTokenPriceFromPancakeswapBUSD(this.BUSM);\n    const priceOfToken = Number(priceToken);\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async getMaxiLPTokenPrice(maxiPool: string): Promise<string> {\n    const bombmaxi = await this.getBombMaxiStats(maxiPool);\n    const totalShares = await bombmaxi.totalShares;\n    //Get amount of tokenA\n    const totalLiquidity = await bombmaxi.totalLiquidity;\n    // const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n\n    const tokenInLP = Number(totalLiquidity) / Number(totalShares);\n    const tokenPrice = tokenInLP //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'BOMB') {\n        return await pool.pendingBOMB(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call pendingShare() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchBoardroomVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentBoardroom(): Contract {\n    if (!this.boardroomVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Boardroom;\n  }\n\n  isOldBoardroomMember(): boolean {\n    return this.boardroomVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { WBNB } = this.config.externalTokens;\n\n    const wftm = new Token(56, WBNB[0], WBNB[1], 'WBNB');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBUSD(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { BUSD } = this.config.externalTokens;\n\n    const wftm = new Token(56, BUSD[0], BUSD[1], 'BUSD');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBTC(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    // const {WBNB} = this.config.externalTokens;\n\n    // const wbnb = new Token(56, WBNB[0], WBNB[1]);\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      //   console.log('priceInBUSDBTC', priceInBUSD.midPrice.toFixed(12));\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBOMBUSD(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    //const {WBNB} = this.config.externalTokens;\n\n    //  const wbnb = new Token(56, WBNB[0], WBNB[1]);\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\n    const token = new Token(56, this.BOMB.address, this.BOMB.decimal, this.BOMB.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      // console.log('test', priceInBUSD.midPrice.toFixed(12));\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${this.BOMB.symbol}: ${err}`);\n    }\n  }\n\n  // async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n  //   const ready = await this.provider.ready;\n  //   if (!ready) return;\n  //   const { chainId } = this.config;\n\n  //   const { WBNB } = this.externalTokens;\n\n  //   const wftm = new TokenSpirit(chainId, WBNB.address, WBNB.decimal);\n  //   const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n  //   try {\n  //     const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n  //     const liquidityToken = wftmToToken.liquidityToken;\n  //     let ftmBalanceInLP = await WBNB.balanceOf(liquidityToken.address);\n  //     let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WBNB.decimal));\n  //     let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n  //     let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n  //     const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n  //     let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n  //     return priceOfShiba.toString();\n  //   } catch (err) {\n  //     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n  //   }\n  // }\n\n  async getWBNBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WBNB, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-BNB-LP'];\n      let ftm_amount_BN = await WBNB.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WBNB.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WBNB: ${err}`);\n    }\n  }\n\n  async getBTCBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { BTCB } = this.externalTokens;\n    try {\n      const btcPriceInBNB = await this.getTokenPriceFromPancakeswap(BTCB);\n\n      const wbnbPrice = await this.getWBNBPriceFromPancakeswap();\n\n      const btcprice = (Number(btcPriceInBNB) * Number(wbnbPrice)).toFixed(2).toString();\n      //console.log('btcprice', btcprice);\n      return btcprice;\n    } catch (err) {\n      console.error(`Failed to fetch token price of BTCB: ${err}`);\n    }\n  }\n\n  // async getBTCBPriceFromPancakeswap(): Promise<string> {\n  //   const ready = await this.provider.ready;\n  //   if (!ready) return;\n  //   const { BTCB, FUSDT } = this.externalTokens;\n  //   try {\n  //     const fusdt_btcb_lp_pair = this.externalTokens['USDT-BTCB-LP'];\n  //     let ftm_amount_BN = await BTCB.balanceOf(fusdt_btcb_lp_pair.address);\n  //     let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, BTCB.decimal));\n  //     let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_btcb_lp_pair.address);\n  //     let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n  //     console.log('BTCB price', (fusdt_amount / ftm_amount).toString());\n  //     return (fusdt_amount / ftm_amount).toString();\n  //     console.log('BTCB price');\n  //   } catch (err) {\n  //     console.error(`Failed to fetch token price of BTCB: ${err}`);\n  //   }\n  // }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getBoardroomAPR() {\n    const Boardroom = this.currentBoardroom();\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(Boardroom.address);\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / boardroomTVL) * 365;\n    return realAPR;\n  }\n\n  async getBombStakeAPR() {\n    const Boardroom = this.currentBoardroom();\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\n    const xBombBombBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\n    const bombTVL = Number(getDisplayBalance(xBombBombBalanceOf, this.XBOMB.decimal)) * Number(BOMBPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100 * 0.2) / bombTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    const canWithdraw = await Boardroom.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.BSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromBoardroom(): Promise<BigNumber> {\n    // const Boardroom = this.currentBoardroom();\n    // const mason = await Boardroom.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.totalSupply();\n  }\n\n  async stakeShareToBoardroom(amount: string): Promise<TransactionResponse> {\n    if (this.isOldBoardroomMember()) {\n      throw new Error(\"you're using old boardroom. please withdraw and deposit the BSHARE again.\");\n    }\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.stake(decimalToBalance(amount));\n  }\n\n  async stakeToBomb(amount: string): Promise<TransactionResponse> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.enter(decimalToBalance(amount));\n  }\n\n  async redeemFromBomb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.redeem(\n      this.BBOMB_BOMB.address,\n      decimalToBalance(amount),\n      this.myAccount,\n      expiry.getTime(),\n      '0x',\n    );\n  }\n\n  async redeemFromBtcb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.redeem(\n      this.BBOMB_BTCB.address,\n      decimalToBalance(amount),\n      this.myAccount,\n      expiry.getTime(),\n      '0x',\n    );\n  }\n  async supplyToBtcb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.mint(this.BBOMB_BTCB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\n  }\n\n  async supplyToBomb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.mint(this.BBOMB_BOMB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\n  }\n\n  async getStakedSharesOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getShareOf(this.myAccount);\n    }\n    return await Boardroom.balanceOf(this.myAccount);\n  }\n\n  async getStakedBomb(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.balanceOf(this.myAccount);\n  }\n\n  async getTotalStakedBomb(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    const bomb = this.BOMB;\n    return await bomb.balanceOf(Xbomb.address);\n  }\n\n  async getTotalSuppliedBomb(): Promise<BigNumber> {\n    const bbombBomb = this.BOMB_BORROWABLE;\n    // const bomb = this.BOMB;\n    const totalBomb = await bbombBomb.totalBalance();\n    //  const borrowBomb = await bbombBomb.totalBorrows();\n    // const totalSupplied = totalBomb + borrowBomb;\n    return totalBomb;\n  }\n\n  async getTotalSuppliedBtcb(): Promise<BigNumber> {\n    const bbombBomb = this.BTCB_BORROWABLE;\n    // const bomb = this.BOMB;\n    const totalBtcb = await bbombBomb.totalBalance();\n    //const borrowBtcb = await bbombBomb.totalBorrows();\n    //  const totalSupplied = totalBtcb + borrowBtcb;\n    return totalBtcb;\n  }\n\n  async getXbombExchange(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    const XbombExchange = await Xbomb.getExchangeRate();\n\n    const xBombPerBomb = parseFloat(XbombExchange) / 1000000000000000000;\n    const xBombRate = xBombPerBomb.toString();\n    return parseUnits(xBombRate, 18);\n  }\n\n  async withdrawFromBomb(amount: string): Promise<TransactionResponse> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.leave(decimalToBalance(amount));\n  }\n\n  async getEarningsOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getCashEarningsOf(this.myAccount);\n    }\n    return await Boardroom.earned(this.myAccount);\n  }\n\n  async withdrawShareFromBoardroom(amount: string): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.claimDividends();\n    }\n    return await Boardroom.claimReward();\n  }\n\n  async exitFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Boardroom.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint();\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Boardroom.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'BOMB') {\n        asset = this.BOMB;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png';\n      } else if (assetName === 'BSHARE') {\n        asset = this.BSHARE;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bshare-512.png';\n      } else if (assetName === 'BBOND') {\n        asset = this.BBOND;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bbond-512.png';\n      } else if (assetName === 'XBOMB') {\n        asset = this.XBOMB;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/xbomb-512.png';\n      } else if (assetName === 'BTCB') {\n        asset = this.BTC;\n        assetUrl = 'https://bscscan.com/token/images/btcb_32.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideBombFtmLP(ftmAmount: string, bombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(\n      bombAmount,\n      bombAmount.mul(992).div(1000),\n      parseUnits(ftmAmount, 18).mul(992).div(1000),\n      overrides,\n    );\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.BOMBBTCB_LP.getReserves();\n    let quote;\n    if (tokenName === 'BOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryBoardroomFundedFilter = Treasury.filters.BoardroomFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let boardroomFundEvents = await Treasury.queryFilter(treasuryBoardroomFundedFilter);\n    var events: any[] = [];\n    boardroomFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].boardroomFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === BNB_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === BNB_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapBBondToBShare(bbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { BShareSwapper } = this.contracts;\n    return await BShareSwapper.swapBBondToBShare(bbondAmount);\n  }\n  async estimateAmountOfBShare(bbondAmount: string): Promise<string> {\n    const { BShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await BShareSwapper.estimateAmountOfBShare(parseUnits(bbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate bshare amount: ${err}`);\n    }\n  }\n\n  async getBShareSwapperStat(address: string): Promise<BShareSwapperStat> {\n    const { BShareSwapper } = this.contracts;\n    const bshareBalanceBN = await BShareSwapper.getBShareBalance();\n    const bbondBalanceBN = await BShareSwapper.getBBondBalance(address);\n    // const bombPriceBN = await BShareSwapper.getBombPrice();\n    // const bsharePriceBN = await BShareSwapper.getBSharePrice();\n    const rateBSharePerBombBN = await BShareSwapper.getBShareAmountPerBomb();\n    const bshareBalance = getDisplayBalance(bshareBalanceBN, 18, 5);\n    const bbondBalance = getDisplayBalance(bbondBalanceBN, 18, 5);\n    return {\n      bshareBalance: bshareBalance.toString(),\n      bbondBalance: bbondBalance.toString(),\n      // bombPrice: bombPriceBN.toString(),\n      // bsharePrice: bsharePriceBN.toString(),\n      rateBSharePerBomb: rateBSharePerBombBN.toString(),\n    };\n  }\n}\n","import {createAction} from '@reduxjs/toolkit';\n\nexport type PopupContent = {\n  txn?: {\n    hash: string;\n    success: boolean;\n    summary?: string;\n  };\n  error?: {\n    message: string;\n    stack: string;\n  };\n};\n\nexport const updateBlockNumber = createAction<{chainId: number; blockNumber: number}>('app/updateBlockNumber');\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{key: string}>('app/removePopup');\n","import {Deployments} from './deployments';\nimport {ChainId} from '@pancakeswap/sdk';\n\nexport type Configuration = {\n  chainId: ChainId;\n  networkName: string;\n  ftmscanUrl: string;\n  defaultProvider: string;\n  deployments: Deployments;\n  externalTokens: {[contractName: string]: [string, number]};\n  config?: EthereumConfig;\n\n  baseLaunchDate: Date;\n  bondLaunchesAt: Date;\n  boardroomLaunchesAt: Date;\n\n  refreshInterval: number;\n};\n\nexport type EthereumConfig = {\n  testing: boolean;\n  autoGasMultiplier: number;\n  defaultConfirmations: number;\n  defaultGas: string;\n  defaultGasPrice: string;\n  ethereumNodeTimeout: number;\n};\n\nexport const defaultEthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 3,\n  defaultGas: '6000000',\n  defaultGasPrice: '7000000000000',\n  ethereumNodeTimeout: 10000,\n};\n","import Web3 from 'web3';\nimport {defaultEthereumConfig, EthereumConfig} from './config';\nimport {formatUnits, parseUnits} from 'ethers/lib/utils';\nimport {BigNumber} from 'ethers';\n\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\n\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\n\n  return new providerClass(endpoint, {\n    timeout: ethConfig.ethereumNodeTimeout,\n  });\n}\n\nexport function balanceToDecimal(s: string): string {\n  return formatUnits(s);\n}\n\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\n  return parseUnits(String(d), decimals);\n}\n","import {createReducer} from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: {tokenAddress: string; spender: string};\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addTransaction, (transactions, {payload: {chainId, from, hash, approval, summary}}) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.');\n      }\n      const txs = transactions[chainId] ?? {};\n      txs[hash] = {hash, approval, summary, from, addedTime: now()};\n      transactions[chainId] = txs;\n    })\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(checkedTransaction, (transactions, {payload: {chainId, hash, blockNumber}}) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, {payload: {hash, chainId, receipt}}) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu, updateBlockNumber} from './actions';\n\ntype PopupList = Array<{\n  key: string;\n  show: boolean;\n  content: PopupContent;\n  removeAfterMs: number | null;\n}>;\n\nexport interface ApplicationState {\n  blockNumber: {[chainId: number]: number};\n  popupList: PopupList;\n  walletModalOpen: boolean;\n  settingsMenuOpen: boolean;\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const {chainId, blockNumber} = action.payload;\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, {payload: {key}}) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }),\n);\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport {save, load} from 'redux-localstorage-simple';\nimport transactions from './transactions/reducer';\nimport application from './application/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n  },\n  middleware: [...getDefaultMiddleware({thunk: false}), save({states: PERSISTED_KEYS})],\n  preloadedState: load({states: PERSISTED_KEYS}),\n});\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export const white = '#FFF';\nexport const black = '#000';\n\nexport const green = {\n  500: '#00D110',\n};\n\nexport const purple = {\n  200: '#bd7cfe',\n  400: '#ab47bc',\n  700: '#7b1fa2',\n};\n\nexport const yellow = {\n  200: '#ffdb4d',\n  400: '#ab47bc',\n  700: '#e6b800',\n};\n\nexport const red = {\n  100: '#C1C1FF',\n  200: '#7575FF',\n  500: '#9090FF',\n};\n\nexport const grey = {\n  100: '#f5f5f5',\n  200: '#eeeeee',\n  300: '#e0e0e0',\n  400: '#bdbdbd',\n  500: '#9e9e9e',\n  600: '#757575',\n  700: '#616161',\n  800: '#424242',\n  900: '#212121',\n};\n\nexport const bg = '#000000';\n\nexport const teal = {\n  200: '#64ffda',\n};\n\nexport const newNavy = {\n  200: '171923',\n};\n","import {black, teal, grey, red, white, yellow, newNavy} from './colors';\n\nconst theme = {\n  borderRadius: 13,\n  color: {\n    black,\n    grey,\n    yellow,\n    primary: {\n      light: red[200],\n      main: red[500],\n    },\n    secondary: {\n      main: teal[200],\n    },\n    white,\n    teal,\n    newNavy,\n  },\n  siteWidth: 1200,\n  spacing: {\n    1: 4,\n    2: 8,\n    3: 16,\n    4: 24,\n    5: 32,\n    6: 48,\n    7: 64,\n  },\n  topBarSize: 72,\n};\n\nexport default theme;\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\nimport { createTheme } from '@material-ui/core/styles';\n\nconst newTheme = createTheme({\n  palette: {\n    type: 'light',\n    text: {\n      primary: '#dddfee',\n      secondary: 'white',\n      yellow: '#f9d749',\n    },\n    background: {\n      default: '#121212',\n      paper: '#171923',\n    },\n    primary: {\n      light: '#ffe066',\n      main: '#2c2560',\n      dark: '#b38f00',\n      contrastText: '#000',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n    action: {\n      disabledBackground: '#CDCDCD',\n      active: '#000',\n      hover: '#fff',\n    },\n  },\n  typography: {\n    color: '#2c2560',\n    fontFamily: ['\"Rubik\"', 'sans-serif'].join(','),\n  },\n});\n\nexport default newTheme;\n","import {useCallback, useEffect, useState} from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import {useCallback, useEffect, useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport {updateBlockNumber} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport default function Updater(): null {\n  const {ethereum, chainId} = useWallet();\n\n  const dispatch = useDispatch();\n\n  const windowVisible = useIsWindowVisible();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return {chainId, blockNumber};\n          return {chainId, blockNumber: Math.max(blockNumber, state.blockNumber)};\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // attach/detach listeners\n  // @ts-ignore\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({chainId, blockNumber: null});\n\n    const provider = getDefaultProvider();\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n\n    provider.on('block', blockNumberCallback);\n    return () => provider.removeListener('block', blockNumberCallback);\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import {useEffect, useState} from 'react';\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {checkedTransaction, finalizeTransaction} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater />\n    <TransactionUpdater />\n  </>\n);\n\nexport default Updaters;\n","import Loader from './Loader';\n\nexport default Loader;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n      }}\n    >\n      <Typography>Loading</Typography>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, {useContext} from 'react';\nimport {AlertCircle, CheckCircle} from 'react-feather';\nimport styled, {ThemeContext} from 'styled-components';\nimport {useWallet} from 'use-wallet';\nimport config from '../../config';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function TransactionPopup({\n  hash,\n  success,\n  summary,\n}: {\n  hash: string;\n  success?: boolean;\n  summary?: string;\n}) {\n  const {chainId} = useWallet();\n  const theme = useContext(ThemeContext);\n\n  return (\n    <RowNoFlex>\n      <div style={{paddingRight: 16}}>\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\n      </div>\n      <div>\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\n        {chainId && (\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\n            View on BSCscan\n          </StyledLink>\n        )}\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, {useCallback} from 'react';\nimport {AlertCircle} from 'react-feather';\nimport styled from 'styled-components';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function ErrorPopup({message, stack}: {message: string; stack: string}) {\n  const copyErrorDetails = useCallback(async () => {\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\n  }, [message, stack]);\n\n  return (\n    <RowNoFlex>\n      <div style={{paddingRight: 16}}>\n        <AlertCircle color=\"#FF6871\" size={24} />\n      </div>\n      <div>\n        <StyledPopupDesc>{message}</StyledPopupDesc>\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\n          Copy error details\n        </StyledLink>\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, {useCallback, useContext, useEffect} from 'react';\nimport {X} from 'react-feather';\nimport {useSpring} from 'react-spring/web';\nimport styled, {ThemeContext} from 'styled-components';\nimport {animated} from 'react-spring';\nimport {PopupContent} from '../../state/application/actions';\nimport {useRemovePopup} from '../../state/application/hooks';\nimport TransactionPopup from './TransactionPopup';\nimport ErrorPopup from './ErrorPopup';\n\nexport const StyledClose = styled(X)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport const Popup = styled.div`\n  display: inline-block;\n  width: 100%;\n  padding: 1em;\n  background-color: ${({theme}) => theme.color.grey[700]};\n  position: relative;\n  border-radius: 10px;\n  padding: 20px;\n  padding-right: 35px;\n  overflow: hidden;\n\n  @media (max-width: 768px) {\n    min-width: 290px;\n  }\n`;\nconst Fader = styled.div`\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: 100%;\n  height: 2px;\n  background-color: ${({theme}) => theme.color.grey[400]};\n`;\n\nconst AnimatedFader = animated(Fader);\n\nexport default function PopupItem({\n  removeAfterMs,\n  content,\n  popKey,\n}: {\n  removeAfterMs: number | null;\n  content: PopupContent;\n  popKey: string;\n}) {\n  const removePopup = useRemovePopup();\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\n  useEffect(() => {\n    if (removeAfterMs === null) return undefined;\n\n    const timeout = setTimeout(() => {\n      removeThisPopup();\n    }, removeAfterMs);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [removeAfterMs, removeThisPopup]);\n\n  const theme = useContext(ThemeContext);\n\n  let popupContent;\n  if ('txn' in content) {\n    const {\n      txn: {hash, success, summary},\n    } = content;\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\n  }\n  if ('error' in content) {\n    const {\n      error: {message, stack},\n    } = content;\n    popupContent = <ErrorPopup message={message} stack={stack} />;\n  }\n\n  const faderStyle = useSpring({\n    from: {width: '100%'},\n    to: {width: '0%'},\n    config: {duration: removeAfterMs ?? undefined},\n  });\n\n  return (\n    <Popup>\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\n      {popupContent}\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\n    </Popup>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport {useActivePopups} from '../../state/application/hooks';\nimport PopupItem from './PopupItem';\n\nconst MobilePopupWrapper = styled.div<{height: string | number}>`\n  position: relative;\n  max-width: 100%;\n  height: ${({height}) => height};\n  margin: ${({height}) => (height ? '0 auto;' : 0)};\n  margin-bottom: ${({height}) => (height ? '20px' : 0)}};\n\n  display: none;\n  @media (max-width: 768px) {\n    display: block;\n  };\n`;\n\nconst MobilePopupInner = styled.div`\n  height: 99%;\n  overflow-x: auto;\n  overflow-y: hidden;\n  display: flex;\n  flex-direction: row;\n  -webkit-overflow-scrolling: touch;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst FixedPopupColumn = styled.div`\n  position: fixed;\n  top: 64px;\n  margin-right: 24px;\n  right: 3rem;\n  max-width: 355px !important;\n  width: 100%;\n  z-index: 2;\n\n  @media (max-width: 768px) {\n    display: none;\n  } ;\n`;\n\nexport default function Popups() {\n  // get all popups\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      <FixedPopupColumn>\n        {activePopups.map((item) => (\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n        ))}\n      </FixedPopupColumn>\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\n        <MobilePopupInner>\n          {activePopups // reverse so new items up front\n            .slice(0)\n            .reverse()\n            .map((item) => (\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n            ))}\n        </MobilePopupInner>\n      </MobilePopupWrapper>\n    </>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\n\nconst useChainId = () => {\n    const [chainId, setChainId] = useState(97);\n\n    const fetchChainId = useCallback(async () => {\n        if (window.ethereum) {\n            const ethereum = window.ethereum;\n            let chainId = await ethereum.request({\n                method: 'eth_chainId',\n            });\n            chainId = parseInt(chainId, 16);\n            setChainId(chainId);\n\n            window.ethereum.on('networkChanged', function (chainId) {\n                chainId = parseInt(chainId, 16);\n                setChainId(chainId);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchChainId().catch((err) => console.error(err.stack));\n\n        const refreshChainId = setInterval(fetchChainId, 1000);\n        return () => clearInterval(refreshChainId);\n    }, [fetchChainId]);\n\n    return chainId;\n};\n\nexport default useChainId;","import React, {Suspense, lazy} from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {ThemeProvider as TP} from '@material-ui/core/styles';\nimport {ThemeProvider as TP1} from 'styled-components';\nimport {UseWalletProvider} from 'use-wallet';\nimport usePromptNetwork from './hooks/useNetworkPrompt';\nimport BanksProvider from './contexts/Banks';\nimport BombFinanceProvider from './contexts/BombFinanceProvider';\nimport ModalsProvider from './contexts/Modals';\nimport store from './state';\nimport theme from './theme';\nimport newTheme from './newTheme';\nimport config from './config';\nimport Updaters from './state/Updaters';\nimport Loader from './components/Loader';\nimport Popups from './components/Popups';\nimport useChainId from './hooks/useChainId';\n//import Regulations from './views/Regulations/Regulations';\nimport {RefreshContextProvider} from './contexts/RefreshContext';\n\nconst Home = lazy(() => import('./views/Home'));\nconst Farm = lazy(() => import('./views/Farm'));\nconst Boardroom = lazy(() => import('./views/Boardroom'));\nconst Bond = lazy(() => import('./views/Bond'));\nconst Xbomb = lazy(() => import('./views/Stake'));\nconst Supply = lazy(() => import('./views/Supply'));\nconst Dashboard = lazy(() => import('./views/Dashboard'));\n// const SBS = lazy(() => import('./views/Sbs'));\n// const Liquidity = lazy(() => import('./views/Liquidity'));\n\nconst NoMatch = () => (\n  <h3 style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\n    URL Not Found. <a href=\"/\">Go back home.</a>\n  </h3>\n);\n\nconst App: React.FC = () => {\n  // Clear localStorage for mobile users\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\n    localStorage.clear();\n    localStorage.setItem('connectorId', '');\n    localStorage.setItem('version_app', '1.1');\n  }\n\n  usePromptNetwork();\n\n  return (\n    <Providers>\n      <Router>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/farm\">\n              <Farm />\n            </Route>\n            <Route path=\"/boardroom\">\n              <Boardroom />\n            </Route>\n            <Route path=\"/bond\">\n              <Bond />\n            </Route>\n            <Route path=\"/xbomb\">\n              <Xbomb />\n            </Route>\n            <Route path=\"/supply\">\n              <Supply />\n            </Route>\n            <Route path=\"/dashboard\">\n              <Dashboard />\n            </Route>\n            {/* <Route path=\"/sbs\">\n              <SBS />\n            </Route> */}\n            {/* <Route path=\"/regulations\">\n              <Regulations />\n            </Route> */}\n            {/* <Route path=\"/liquidity\">\n              <Liquidity />\n            </Route> */}\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Providers>\n  );\n};\n\nconst UseWalletProviderWrapper = (props: any) => {\n  const chainId = useChainId();\n\n  return <UseWalletProvider chainId={chainId} {...props}></UseWalletProvider>;\n}\n\nconst Providers: React.FC = ({children}) => {\n  return (\n    <TP1 theme={theme}>\n      <TP theme={newTheme}>\n        <UseWalletProviderWrapper\n                    chainId={config.chainId}\n\n          connectors={{\n            walletconnect: { rpcUrl: 'https://rpc.ankr.com/bsc' },\n            walletlink: {\n           //   url: config.defaultProvider,\n              url: 'https://rpc.ankr.com/bsc',\n              appName: 'bomb.money',\n              appLogoUrl: 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png',\n            },\n          }}\n        >\n          <Provider store={store}>\n            <Updaters />\n            <RefreshContextProvider>\n              <BombFinanceProvider>\n                <ModalsProvider>\n                  <BanksProvider>\n                    <>\n                      <Popups />\n                      {children}\n                    </>\n                  </BanksProvider>\n                </ModalsProvider>\n              </BombFinanceProvider>\n            </RefreshContextProvider>\n          </Provider>\n        </UseWalletProviderWrapper>\n      </TP>\n    </TP1>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}