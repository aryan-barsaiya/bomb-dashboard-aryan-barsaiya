{"version":3,"sources":["components/Spacer/Spacer.tsx","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","hooks/useTotalSuppliedBtcbBalance.ts","hooks/useTotalSuppliedBombBalance.ts","views/Supply/components/DepositModal.tsx","views/Supply/components/WithdrawModal.tsx","hooks/useSupplyToBomb.ts","hooks/useRedeemFromBomb.ts","views/Supply/components/SupplyBomb.tsx","hooks/useSupplyToBtcb.ts","hooks/useRedeemFromBtcb.ts","views/Supply/components/SupplyBtcb.tsx","views/Supply/Supply.js","hooks/useHandleTransactionReceipt.ts","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/ModalActions/ModalActions.tsx","components/CardIcon/CardIcon.tsx","assets/img/background.jpg","hooks/useEagerConnect.js","components/Page/Page.tsx","components/UnlockWallet/UnlockWallet.tsx","components/Value/Value.tsx","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","CardContent","React","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","padding","paddingBottom","name","useSuppliedBtcbBalance","slowRefresh","useRefresh","useState","BigNumber","from","balance","setBalance","bombFinance","useBombFinance","useEffect","a","getTotalSuppliedBtcb","console","error","fetchBalance","useSuppliedBombBalance","getTotalSuppliedBomb","DepositModal","max","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","Modal","ModalTitle","text","TokenInput","onSelectMax","onChange","symbol","ModalActions","Button","color","variant","onClick","WithdrawModal","useSupplyToBomb","handleTransactionReceipt","useHandleTransactionReceipt","onStake","amount","supplyToBomb","useRedeemFromBomb","onWithdraw","redeemFromBomb","StyledCardHeader","StyledCardActions","StyledActionSpacer","theme","StyledCardContentInner","SupplyBomb","bombStats","useBombStats","useApprove","BOMB","contracts","BombRouter","address","approveStatus","approve","BBOMBBOMB","approveStatusW","approveW","tokenBalance","useTokenBalance","stakedBalance","BBOMB_BOMB","bombPriceInDollars","Number","priceInDollars","toFixed","stakedTokenPriceInDollars","tokenPriceInDollars","getDisplayBalance","toString","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","Box","Card","Typography","CardIcon","TokenSymbol","watchAssetInMetamask","style","position","top","right","border","marginBottom","alt","width","filter","src","MetamaskFox","Value","Label","ApprovalState","APPROVED","disabled","NOT_APPROVED","marginTop","IconButton","useSupplyToBtcb","supplyToBtcb","useRedeemFromBtcb","redeemFromBtcb","SupplyBtcb","btcStats","useBtcStats","BTC","BBOMBBTCB","BBOMB_BTCB","btcPriceInDollars","BackgroundImage","createGlobalStyle","HomeImage","useStyles","makeStyles","gridItem","height","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","Supply","account","useWallet","stakedBombBalance","stakedBtcbBalance","Page","Helmet","align","gutterBottom","Grid","container","justify","mt","Alert","severity","item","xs","md","lg","textTransform","UnlockWallet","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","stack","StyledInputWrapper","grey","borderRadius","StyledInput","input","Input","endAdornment","placeholder","startAdornment","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","toLocaleString","StyledModalActions","StyledModalAction","children","l","Children","toArray","length","map","child","i","StyledCardIcon","module","exports","useEagerConnect","connect","connector","window","localStorage","getItem","setItem","connectorId","minHeight","Nav","Container","maxWidth","Footer","AccountButton","StyledValue","StyledIcon","Icon","AddIcon","themeColor","viewBox","d","fill","RemoveIcon","StyledButton","button","undefined","StyledLink","Link","to"],"mappings":"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","file":"static/js/16.a5a3fa92.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport styled, {ThemeContext} from 'styled-components';\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Spacer: React.FC<SpacerProps> = ({size = 'md'}) => {\n  const {spacing} = useContext(ThemeContext);\n\n  let s: number;\n  switch (size) {\n    case 'lg':\n      s = spacing[6];\n      break;\n    case 'sm':\n      s = spacing[2];\n      break;\n    case 'md':\n    default:\n      s = spacing[4];\n  }\n\n  return <StyledSpacer size={s} />;\n};\n\ninterface StyledSpacerProps {\n  size: number;\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`;\n\nexport default Spacer;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useBombFinance from './useBombFinance';\nimport useRefresh from './useRefresh';\n\nconst useSuppliedBtcbBalance = () => {\n  const { slowRefresh } = useRefresh();\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  useEffect(() => {\n    async function fetchBalance() {\n      try {\n        setBalance(await bombFinance.getTotalSuppliedBtcb());\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    fetchBalance();\n  }, [slowRefresh, bombFinance]);\n  return balance;\n};\n\nexport default useSuppliedBtcbBalance;\n","import { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useBombFinance from './useBombFinance';\nimport useRefresh from './useRefresh';\n\nconst useSuppliedBombBalance = () => {\n  const { slowRefresh } = useRefresh();\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  useEffect(() => {\n    async function fetchBalance() {\n      try {\n        setBalance(await bombFinance.getTotalSuppliedBomb());\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    fetchBalance();\n  }, [slowRefresh, bombFinance]);\n  return balance;\n};\n\nexport default useSuppliedBombBalance;\n","import React, {useCallback, useMemo, useState} from 'react';\n\nimport {Button} from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, {ModalProps} from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport {getFullDisplayBalance} from '../../../utils/formatBalance';\nimport {BigNumber} from 'ethers';\n\ninterface DepositModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({max, onConfirm, onDismiss, tokenName = ''}) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\n  }, [max, tokenName]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Deposit ${tokenName}`} />\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default DepositModal;\n","import React, {useCallback, useMemo, useState} from 'react';\n\nimport {Button} from '@material-ui/core';\nimport Modal, {ModalProps} from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport {getFullDisplayBalance} from '../../../utils/formatBalance';\nimport {BigNumber} from 'ethers';\n\ninterface WithdrawModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({onConfirm, onDismiss, max, tokenName = ''}) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max);\n  }, [max]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Withdraw ${tokenName} from supply`}  />\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default WithdrawModal;\n","import { useCallback } from 'react';\nimport useBombFinance from './useBombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useSupplyToBomb = () => {\n  const bombFinance = useBombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleStake = useCallback(\n    (amount: string) => {\n      handleTransactionReceipt(bombFinance.supplyToBomb(amount), `Supply  ${amount} BOMB`);\n    },\n    [bombFinance, handleTransactionReceipt],\n  );\n  return { onStake: handleStake };\n};\n\nexport default useSupplyToBomb;\n","import { useCallback } from 'react';\nimport useBombFinance from './useBombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useRedeemFromBomb = () => {\n  const bombFinance = useBombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleWithdraw = useCallback(\n    (amount: string) => {\n      handleTransactionReceipt(bombFinance.redeemFromBomb(amount), `Redeem ${amount} BOMB from Supply`);\n    },\n    [bombFinance, handleTransactionReceipt],\n  );\n  return { onWithdraw: handleWithdraw };\n};\n\nexport default useRedeemFromBomb;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\n\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n//import useXbombBalance from '../../../hooks/useXbombBalance';\nimport useBombStats from '../../../hooks/useBombStats';\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\n//import useApproveW, {ApprovalState as ApprovalStateW} from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport MetamaskFox from '../../../assets/img/metamask-fox.svg';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport useBombFinance from '../../../hooks/useBombFinance';\n//import useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';   //May not be needed anymore.\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport useSupplyToBomb from '../../../hooks/useSupplyToBomb';\nimport useRedeemFromBomb from '../../../hooks/useRedeemFromBomb';\n\nconst SupplyBomb: React.FC = () => {\n  const bombFinance = useBombFinance();\n  const bombStats = useBombStats();\n\n  const [approveStatus, approve] = useApprove(bombFinance.BOMB, bombFinance.contracts.BombRouter.address);\n  const [approveStatusW, approveW] = useApprove(bombFinance.BBOMBBOMB, bombFinance.contracts.BombRouter.address);\n\n  const tokenBalance = useTokenBalance(bombFinance.BOMB);\n  //const stakedBalance = useStakedBomb();\n  const stakedBalance = useTokenBalance(bombFinance.BBOMB_BOMB);\n\n  // const xbombBalance = useXbombBalance();\n  // const xbombRate = Number(xbombBalance) / 1000000000000000000;\n  // const xbombToBombEquivalent = Number(getDisplayBalance(stakedBalance)) * xbombRate;\n\n  const bombPriceInDollars = useMemo(\n    () => (bombStats ? Number(bombStats.priceInDollars).toFixed(2) : null),\n    [bombStats],\n  );\n\n  const stakedTokenPriceInDollars = Number(bombPriceInDollars);\n\n  const tokenPriceInDollars = useMemo(\n    () => {\n      return stakedTokenPriceInDollars\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\n        : null;\n    },\n    [stakedTokenPriceInDollars, stakedBalance],\n  );\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\n\n  const { onStake } = useSupplyToBomb();\n  const { onWithdraw } = useRedeemFromBomb();\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={(value) => {\n        onStake(value);\n        onDismissDeposit();\n      }}\n      tokenName={'BOMB'}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={(value) => {\n        onWithdraw(value);\n        onDismissWithdraw();\n      }}\n      tokenName={'BOMB'}\n    />,\n  );\n\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <StyledCardContentInner>\n            <StyledCardHeader>\n              <Typography variant='h5' component='h2'>\n                Supply BOMB\n              </Typography>\n              <CardIcon>\n                <TokenSymbol symbol=\"BOMB\" />\n              </CardIcon>\n\n              <Button\n                className={'shinyButton'}\n                onClick={() => {\n                  bombFinance.watchAssetInMetamask('BOMB');\n                }}\n                style={{\n                  position: 'static',\n                  top: '10px',\n                  right: '10px',\n                  border: '1px grey solid',\n                  paddingBottom: '5px',\n                  marginBottom: '20px',\n                }}\n              >\n                {' '}\n                <b>+</b>&nbsp;&nbsp;\n                <img alt=\"metamask fox\" style={{ width: '20px', filter: 'grayscale(100%)' }} src={MetamaskFox} />\n              </Button>\n              <Value value={getDisplayBalance(stakedBalance)} />\n              <Label text={'bBOMB (BOMB)'} variant=\"yellow\" />\n              <Label text={`≈ $${tokenPriceInDollars}`} variant=\"yellow\" />\n            </StyledCardHeader>\n            <StyledCardActions>\n              {approveStatus !== ApprovalState.APPROVED ? (\n                <Button\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\n                  className={approveStatus === ApprovalState.NOT_APPROVED ? 'shinyButton' : 'shinyButtonDisabled'}\n                  style={{ marginTop: '20px' }}\n                  onClick={approve}\n                >\n                  Approve BOMB\n                </Button>\n              ) : (\n                  <>\n                    {approveStatusW !== ApprovalState.APPROVED ? (\n            \n                      <IconButton onClick={approveW}>\n                        A\n                      </IconButton>\n                    ) : (\n                      <IconButton onClick={onPresentWithdraw}>\n                        <RemoveIcon color={'yellow'} />\n                      </IconButton>\n                        \n                          \n                            )}\n                          \n                  <StyledActionSpacer />\n                  <IconButton onClick={onPresentDeposit}>\n                    <AddIcon color={'yellow'} />\n                  </IconButton>\n                </>\n              )}\n            </StyledCardActions>\n          </StyledCardContentInner>\n        </CardContent>\n      </Card>\n      {/* <Box mt={2} style={{color: '#FFF'}}>\n        {canWithdrawFromBoardroom ? (\n          ''\n        ) : (\n          <Card>\n            <CardContent>\n              <Typography style={{textAlign: 'center'}}>Withdraw possible in</Typography>\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\n            </CardContent>\n          </Card>\n        )}\n      </Box> */}\n    </Box>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default SupplyBomb;\n","import { useCallback } from 'react';\nimport useBombFinance from './useBombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useSupplyToBtcb = () => {\n  const bombFinance = useBombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleStake = useCallback(\n    (amount: string) => {\n      handleTransactionReceipt(bombFinance.supplyToBtcb(amount), `Supply  ${amount} BTCB`);\n    },\n    [bombFinance, handleTransactionReceipt],\n  );\n  return { onStake: handleStake };\n};\n\nexport default useSupplyToBtcb;\n","import { useCallback } from 'react';\nimport useBombFinance from './useBombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useRedeemFromBtcb = () => {\n  const bombFinance = useBombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleWithdraw = useCallback(\n    (amount: string) => {\n      handleTransactionReceipt(bombFinance.redeemFromBtcb(amount), `Redeem ${amount} BTCB from Supply`);\n    },\n    [bombFinance, handleTransactionReceipt],\n  );\n  return { onWithdraw: handleWithdraw };\n};\n\nexport default useRedeemFromBtcb;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\n\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n//import useXbombBalance from '../../../hooks/useXbombBalance';\nimport useBtcStats from '../../../hooks/useBtcStats';\nimport useApprove, {ApprovalState} from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport MetamaskFox from '../../../assets/img/metamask-fox.svg';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport useBombFinance from '../../../hooks/useBombFinance';\n//import useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';   //May not be needed anymore.\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport useSupplyToBtcb from '../../../hooks/useSupplyToBtcb';\nimport useRedeemFromBtcb from '../../../hooks/useRedeemFromBtcb';\n\n\n\nconst SupplyBtcb: React.FC = () => {\n  const bombFinance = useBombFinance();\n  const btcStats = useBtcStats();\n\n  const [approveStatus, approve] = useApprove(bombFinance.BTC, bombFinance.contracts.BombRouter.address);\n  const [approveStatusW, approveW] = useApprove(bombFinance.BBOMBBTCB, bombFinance.contracts.BombRouter.address);\n\n  const tokenBalance = useTokenBalance(bombFinance.BTC);\n  //const stakedBalance = useStakedBomb();\n  const stakedBalance = useTokenBalance(bombFinance.BBOMB_BTCB);\n\n  // const xbombBalance = useXbombBalance();\n  // const xbombRate = Number(xbombBalance) / 1000000000000000000;\n  // const xbombToBombEquivalent = Number(getDisplayBalance(stakedBalance)) * xbombRate;\n\n  const btcPriceInDollars = useMemo(\n    () => (btcStats ? Number(btcStats).toFixed(2) : null),\n    [btcStats],\n  );\n\n  const stakedTokenPriceInDollars = Number(btcPriceInDollars);\n\n  const tokenPriceInDollars = useMemo(\n    () => {\n      return stakedTokenPriceInDollars\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\n        : null;\n    },\n    [stakedTokenPriceInDollars, stakedBalance],\n  );\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\n\n  const { onStake } = useSupplyToBtcb();\n  const { onWithdraw } = useRedeemFromBtcb();\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={(value) => {\n        onStake(value);\n        onDismissDeposit();\n      }}\n      tokenName={'BTCB'}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={(value) => {\n        onWithdraw(value);\n        onDismissWithdraw();\n      }}\n      tokenName={'BTCB'}\n    />,\n  );\n\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <StyledCardContentInner>\n            <StyledCardHeader>\n                 <Typography variant=\"h5\" component=\"h2\">\n              Supply BTCB\n            </Typography>\n              <CardIcon>\n                <TokenSymbol symbol=\"BTCB\" />\n              </CardIcon>\n\n              <Button\n                className={'shinyButton'}\n                onClick={() => {\n                  bombFinance.watchAssetInMetamask('BTCB');\n                }}\n                style={{\n                  position: 'static',\n                  top: '10px',\n                  right: '10px',\n                  border: '1px grey solid',\n                  paddingBottom: '5px',\n                  marginBottom: '20px',\n                }}\n              >\n                {' '}\n                <b>+</b>&nbsp;&nbsp;\n                <img alt=\"metamask fox\" style={{ width: '20px', filter: 'grayscale(100%)' }} src={MetamaskFox} />\n              </Button>\n              <Value value={getDisplayBalance(stakedBalance)} />\n              <Label text={'bBOMB (BTCB)'} variant=\"yellow\" />\n              <Label text={`≈ $${tokenPriceInDollars}`} variant=\"yellow\" />\n            </StyledCardHeader>\n            <StyledCardActions>\n              {approveStatus !== ApprovalState.APPROVED ? (\n                <Button\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\n                  className={approveStatus === ApprovalState.NOT_APPROVED ? 'shinyButton' : 'shinyButtonDisabled'}\n                  style={{ marginTop: '20px' }}\n                  onClick={approve}\n                >\n                  Approve BTCB\n                </Button>\n              ) : (\n                  <>\n                    {approveStatusW !== ApprovalState.APPROVED ? (\n            \n                      <IconButton onClick={approveW}>\n                        A\n                      </IconButton>\n                    ) : (\n                      <IconButton onClick={onPresentWithdraw}>\n                        <RemoveIcon color={'yellow'} />\n                      </IconButton>\n                        \n                          \n                            )}\n                          \n                           \n                  <StyledActionSpacer />\n                  <IconButton onClick={onPresentDeposit}>\n                    <AddIcon color={'yellow'} />\n                  </IconButton>\n                </>\n              )}\n            </StyledCardActions>\n          </StyledCardContentInner>\n        </CardContent>\n      </Card>\n      {/* <Box mt={2} style={{color: '#FFF'}}>\n        {canWithdrawFromBoardroom ? (\n          ''\n        ) : (\n          <Card>\n            <CardContent>\n              <Typography style={{textAlign: 'center'}}>Withdraw possible in</Typography>\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\n            </CardContent>\n          </Card>\n        )}\n      </Box> */}\n    </Box>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default SupplyBtcb;\n","import React from 'react';\nimport { useWallet } from 'use-wallet';\nimport styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Typography, Grid, Card, CardContent } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport Spacer from '../../components/Spacer';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\n// import bombFinance, { BOMB, BTCB } from '../../bomb-finance';\n// import useXbombBalance from '../../hooks/useXbombBalance';\n// import useXbombAPR from '../../hooks/useXbombAPR';\nimport useSuppliedBtcbBalance from '../../hooks/useTotalSuppliedBtcbBalance';\nimport useSuppliedBombBalance from '../../hooks/useTotalSuppliedBombBalance';\n\nimport { createGlobalStyle } from 'styled-components';\nimport { Helmet } from 'react-helmet'\nimport SupplyBomb from './components/SupplyBomb';\n\nimport HomeImage from '../../assets/img/background.jpg';\nimport SupplyBtcb from './components/SupplyBtcb';\nconst BackgroundImage = createGlobalStyle`\n  body {\n    background: url(${HomeImage}) repeat !important;\n    background-size: cover !important;\n    background-color: #171923;\n  }\n`;\nconst TITLE = 'bomb.money | Supply Assets'\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst Supply = () => {\n  const classes = useStyles();\n  const { account } = useWallet();\n  // const { onRedeem } = useRedeemOnBoardroom();\n  const stakedBombBalance = Number(useSuppliedBombBalance() / 1000000000000000000).toFixed(2);\n  const stakedBtcbBalance = Number(useSuppliedBtcbBalance() / 1000000000000000000).toFixed(5);\n  // const xbombBalance = useXbombBalance();\n  // const xbombRate = Number(xbombBalance / 1000000000000000000).toFixed(4);\n  // const xbombAPR = useXbombAPR();\n\n  //const xbombTVL = xbombAPR.TVL;\n\n\n\n\n  // const stakedTotalBombBalance = useSuppliedTotalBombBalance();\n  // console.log(\"stakedTotalBombBalance\", Number(stakedTotalBombBalance / 1000000000000000000).toFixed(2));\n  // const bombTotalStaked = Number(stakedTotalBombBalance / 1000000000000000000).toFixed(0);\n  // const xbombTVL = useMemo(() => (xbombAPR ? Number(xbombAPR.TVL).toFixed(0) : null), [xbombAPR]);\n  // const xbombDailyAPR = useMemo(() => (xbombAPR ? Number(xbombAPR.dailyAPR).toFixed(2) : null), [xbombAPR]);\n  // const xbombYearlyAPR = useMemo(() => (xbombAPR ? Number(xbombAPR.yearlyAPR).toFixed(2) : null), [xbombAPR]);\n\n  // console.log('xbombAPR', xbombYearlyAPR);\n\n  // const cashStat = useCashPriceInEstimatedTWAP();\n\n  return (\n    <Page>\n      <BackgroundImage />\n      <Helmet>\n        <title>{TITLE}</title>\n      </Helmet>\n      {!!account ? (\n        <>\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n            Supply Assets\n          </Typography>\n          <Grid container justify=\"center\">\n            <Box mt={3} style={{ width: '600px' }}>\n              <Alert variant=\"filled\" severity=\"error\">\n                <h2>All features are not available yet!</h2>\n                <p>\n                  <b>Test our single asset staking features while we finish building our new web UI!</b>\n                </p>\n\n              </Alert>\n\n            </Box>\n          </Grid>\n\n\n\n          <Box mt={5}>\n            <Grid container justify=\"center\" spacing={3}>\n\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>BTCB AVAILABLE</Typography>\n                    <Typography>{Number(stakedBtcbBalance)} BTCB</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>BOMB AVAILABLE</Typography>\n                    <Typography>{Number(stakedBombBalance)} BOMB</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              {/* <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>\n                      BOMB PEG <small>(TWAP)</small>\n                    </Typography>\n                    <Typography> BTC</Typography>\n                    <Typography>\n                      <small>per 10,000 BOMB</small>\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid> */}\n              {/* <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>APR</Typography>\n                    <Typography>{xbombYearlyAPR}%</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>Daily APR</Typography>\n                    <Typography>{xbombDailyAPR}%</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>BOMB Staked</Typography>\n                    <Typography>{roundAndFormatNumber(bombTotalStaked)}</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>BOMB Staked USD</Typography>\n                    <Typography>${roundAndFormatNumber(xbombTVL, 2)}</Typography>\n                  </CardContent>\n                </Card>\n              </Grid> */}\n            </Grid>\n\n\n            <Box mt={4}>\n              <StyledBoardroom>\n                <StyledCardsWrapper>\n                  {/* <StyledCardWrapper>\n                    <Harvest />\n                  </StyledCardWrapper> */}\n                  {/* <Spacer /> */}\n                  <StyledCardWrapper>\n\n                    <SupplyBtcb />\n                  </StyledCardWrapper>\n                  <Spacer />\n                  <StyledCardWrapper>\n\n                    <SupplyBomb />\n                  </StyledCardWrapper>\n                </StyledCardsWrapper>\n              </StyledBoardroom>\n            </Box>\n            <Box mt={4}>\n              <StyledBoardroom>\n                <StyledCardsWrapper>\n                  {/* <StyledCardWrapper>\n                    <Harvest />\n                  </StyledCardWrapper> */}\n                  {/* <Spacer /> */}\n                  <StyledCardWrapper>\n                    {/* <Box>\n                      <Card>\n                        <CardContent>\n                          <h2>About xBOMB & Rewards</h2>\n                          <p><strong>We are currently depositing 10,000 BOMB per week into the staking pool until our BTC Single Staking service is launched.</strong></p>\n                          <p>xBOMB will be the governance token required to cast votes on protocol decisions.</p>\n                          <p>20% of all BOMB minted will be deposited into the xBOMB smart contract, increasing the amount of BOMB that can be redeemed for each xBOMB. Rewards will be deposited at random times to prevent abuse.</p>\n                          <p>Functionality will be developed around xBOMB including using it as collateral to borrow other assets.</p>\n                          <p>Reward structure subject to change based on community voting.</p>\n                        </CardContent>\n                      </Card>\n                    </Box> */}\n                  </StyledCardWrapper>\n                </StyledCardsWrapper>\n              </StyledBoardroom>\n            </Box>\n            {/* <Grid container justify=\"center\" spacing={3}>\n            <Grid item xs={4}>\n              <Card>\n                <CardContent align=\"center\">\n                  <Typography>Rewards</Typography>\n\n                </CardContent>\n                <CardActions style={{justifyContent: 'center'}}>\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\n                </CardActions>\n                <CardContent align=\"center\">\n                  <Typography>Claim Countdown</Typography>\n                  <Typography>00:00:00</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={4}>\n              <Card>\n                <CardContent align=\"center\">\n                  <Typography>Stakings</Typography>\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\n                </CardContent>\n                <CardActions style={{justifyContent: 'center'}}>\n                  <Button>+</Button>\n                  <Button>-</Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          </Grid> */}\n          </Box>\n          {/* \n          <Box mt={5}>\n            <Grid container justify=\"center\" spacing={3} mt={10}>\n              <Button\n                disabled={stakedBombBalance.eq(0) || (!canWithdraw && !canClaimReward)}\n                onClick={onRedeem}\n                className={\n                  stakedBombBalance.eq(0) || (!canWithdraw && !canClaimReward)\n                    ? 'shinyButtonDisabledSecondary'\n                    : 'shinyButtonSecondary'\n                }\n              >\n                Claim &amp; Withdraw\n              </Button>\n            </Grid>\n          </Box> */}\n        </>\n      ) : (\n        <UnlockWallet />\n      )}\n    </Page>\n  )\n};\n\nconst StyledBoardroom = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nexport default Supply;\n","import {useCallback} from 'react';\nimport {TransactionResponse} from '@ethersproject/providers';\nimport {useTransactionAdder} from '../state/transactions/hooks';\nimport {useAddPopup} from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, {summary}))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({error: {message, stack: err.message || err.stack}});\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode;\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  startAdornment?: React.ReactNode;\n  value: string;\n}\n\nconst Input: React.FC<InputProps> = ({endAdornment, onChange, placeholder, startAdornment, value}) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  );\n};\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.color.grey[200]};\n  border-radius: ${(props) => props.theme.borderRadius}px;\n  display: flex;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledInput = styled.input`\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.color.grey[600]};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`;\n\nexport default Input;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport {Button} from '@material-ui/core';\nimport Input, {InputProps} from '../Input';\n\ninterface TokenInputProps extends InputProps {\n  max: number | string;\n  symbol: string;\n  onSelectMax?: () => void;\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({max, symbol, onChange, onSelectMax, value}) => {\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} Available\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\n            <StyledSpacer />\n            <div>\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\n                Max\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n    </StyledTokenInput>\n  );\n};\n\n/*\n            <div>\n              <Button size=\"sm\" text=\"Max\" />\n            </div>\n*/\n\nconst StyledTokenInput = styled.div``;\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`;\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`;\n\nexport default TokenInput;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ModalActions: React.FC = ({children}) => {\n  const l = React.Children.toArray(children).length;\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <StyledSpacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  );\n};\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.color.grey[100]}00;\n  display: flex;\n  height: 96px;\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\n    ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`;\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nexport default ModalActions;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({children}) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\n  background-color: #363746;\n  font-size: 36px;\n  height: 95px;\n  width: 95px;\n  border-radius: 95px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","module.exports = __webpack_public_path__ + \"static/media/background.3761c6a5.jpg\";","import { useEffect } from 'react';\n// import { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\nimport { useWallet } from 'use-wallet';\n\nconst useEagerConnect = () => {\n  // const { login } = useAuth()\n  const { account, connect, connector } = useWallet();\n\n  if (account && window.localStorage.getItem('connectorId') === '') {\n    window.localStorage.setItem('connectorId', connector);\n  }\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem('connectorId');\n    if (connectorId && !account) {\n      connect(connectorId);\n    }\n  }, [connect, account]);\n};\n\nexport default useEagerConnect;\n","import React from 'react';\nimport {Container} from '@material-ui/core';\nimport useEagerConnect from '../../hooks/useEagerConnect';\n\nimport Footer from '../Footer';\nimport Nav from '../Nav';\n\nconst Page: React.FC = ({children}) => {\n  useEagerConnect();\n  return (\n    <div style={{position: 'relative', minHeight: '100vh'}}>\n      <Nav />\n      <Container maxWidth=\"lg\" style={{paddingBottom: '5rem'}}>\n        {children}\n      </Container>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Page;\n","import React from 'react';\nimport {Box} from '@material-ui/core';\nimport AccountButton from '../Nav/AccountButton';\n\nconst UnlockWallet = () => {\n  return (\n    <Box style={{'textAlign': 'center', 'marginTop': '25px'}}>\n      <AccountButton />\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\n    </Box>\n  );\n};\n\nexport default UnlockWallet;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\ninterface ValueProps {\n  value: string;\n}\n\nconst Value: React.FC<ValueProps> = ({value}) => {\n  return <StyledValue>{value}</StyledValue>;\n};\n\nconst StyledValue = styled.div`\n  font-size: 36px;\n  font-weight: 700;\n`;\n\nexport default Value;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface IconProps {\n  color?: string;\n  children?: string;\n}\n\nconst Icon: React.FC = ({children}) => <StyledIcon>{children}</StyledIcon>;\n\nconst StyledIcon = styled.div``;\n\nexport default Icon;\n","import React, {useContext} from 'react';\nimport {ThemeContext} from 'styled-components';\n\nimport Icon, {IconProps} from '../Icon';\n\nconst AddIcon: React.FC<IconProps> = ({color}) => {\n  const {color: themeColor} = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default AddIcon;\n","import React, {useContext} from 'react';\nimport {ThemeContext} from 'styled-components';\n\nimport Icon, {IconProps} from '../Icon';\n\nconst RemoveIcon: React.FC<IconProps> = ({color}) => {\n  const {color: themeColor} = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13H5v-2h14v2z\" />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default RemoveIcon;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport {Link} from 'react-router-dom';\n\ninterface IconButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  onClick?: () => void;\n  to?: string;\n}\n\nconst IconButton: React.FC<IconButtonProps> = ({children, disabled, onClick, to}) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick}>\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\n    </StyledButton>\n  );\n};\n\ninterface StyledButtonProps {\n  disabled?: boolean;\n}\n/*\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\n */\n\n// background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\n// color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  align-items: center;\n  border: 2px solid;\n  border-radius: 28px;\n  background-color: #171923;\n  box-shadow: ${(props) => ('0px 0px 5px 0px ' + !props.disabled ? 'rgba(251,221,76,1)' : 'grey' )};\n  color: ${(props) => (!props.disabled ? '#f9d749' : 'grey')};\n  cursor: pointer;\n  display: flex;\n  font-weight: 700;\n  height: 56px;\n  justify-content: center;\n  letter-spacing: 1px;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\n  text-transform: uppercase;\n  width: 56px;\n\n  &:hover {\n    background-color: #f9d749;\n    color: #171923;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`;\n\nexport default IconButton;\n"],"sourceRoot":""}